{"version":3,"sources":["webpack:///./node_modules/core-js/modules/es.set.js","webpack:///./node_modules/core-js/modules/es.string.search.js","webpack:///../../../src/components/VTextarea/VTextarea.ts","webpack:///../../../src/components/VSwitch/VSwitch.ts","webpack:///../../../src/components/VTreeview/VTreeviewNode.ts","webpack:///../../../../src/components/VTreeview/util/filterTreeItems.ts","webpack:///../../../src/components/VTreeview/VTreeview.ts"],"names":["collection","collectionStrong","module","exports","init","this","arguments","length","undefined","fixRegExpWellKnownSymbolLogic","anObject","requireObjectCoercible","sameValue","toString","regExpExec","SEARCH","nativeSearch","maybeCallNative","regexp","O","searcher","call","RegExp","string","rx","S","res","done","value","previousLastIndex","lastIndex","result","index","baseMixins","name","props","autoGrow","noResize","rowHeight","type","Number","default","validator","v","isNaN","parseFloat","rows","parseInt","computed","classes","noResizeHandle","watch","lazyValue","$nextTick","mounted","setTimeout","methods","calculateInputHeight","input","$refs","height","minHeight","Math","genInput","onInput","onKeyDown","isFocused","e","directives","Touch","inset","loading","Boolean","flat","attrs","String","role","validationState","hasError","hasColor","switchData","setTextColor","class","themeClasses","genDefaultSlot","genSwitch","switchAttrs","$createElement","staticClass","genRipple","left","right","onSwipeRight","genProgress","$slots","progress","color","size","width","indeterminate","onSwipeLeft","onChange","onKeydown","mixins","VTreeviewNodeProps","activatable","activeClass","expandIcon","indeterminateIcon","itemChildren","itemDisabled","itemKey","itemText","loadChildren","loadingIcon","offIcon","onIcon","openOnClick","rounded","selectable","selectedColor","shaped","transition","selectionType","includes","VTreeviewNode","inject","treeview","level","item","parentIsDisabled","data","hasLoaded","isActive","isIndeterminate","isLoading","isOpen","isSelected","disabled","key","children","child","text","scopedProps","leaf","selected","active","open","computedIcon","hasChildren","created","beforeDestroy","checkChildren","Promise","resolve","genLabel","$scopedSlots","label","slot","genPrependSlot","prepend","genAppendSlot","append","genContent","genToggle","VIcon","on","click","genCheckbox","genLevel","genNode","genChild","scopedSlots","genChildrenWrapper","map","c","genTransition","render","h","search","filter","match","i","filterTreeItems","excluded","provide","dense","hoverable","items","multipleActive","openAll","returnObject","activeCache","nodes","openCache","selectedCache","Set","excludedItems","handler","oldKeys","Object","k","newKeys","getKeys","diff","oldSelectedCache","emitSelected","deep","getValue","console","updateAll","keys","buildTree","parent","oldNode","hasOwnProperty","vnode","node","calculateState","add","state","counts","emitOpen","emitActive","emitNodeCache","handleNodeCacheWatcher","old","updateFn","emitFn","getDescendants","descendants","getParents","parents","register","unregister","isParent","updateActive","delete","updateSelected","isForced","changed","descendant","calculated","updateOpen","updateVnodeState","isExcluded","has"],"mappings":"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","file":"js/chunk-52b5f4f6.ad933629.js","sourcesContent":["'use strict';\nvar collection = require('../internals/collection');\nvar collectionStrong = require('../internals/collection-strong');\n\n// `Set` constructor\n// https://tc39.es/ecma262/#sec-set-objects\nmodule.exports = collection('Set', function (init) {\n  return function Set() { return init(this, arguments.length ? arguments[0] : undefined); };\n}, collectionStrong);\n","'use strict';\nvar fixRegExpWellKnownSymbolLogic = require('../internals/fix-regexp-well-known-symbol-logic');\nvar anObject = require('../internals/an-object');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\nvar sameValue = require('../internals/same-value');\nvar toString = require('../internals/to-string');\nvar regExpExec = require('../internals/regexp-exec-abstract');\n\n// @@search logic\nfixRegExpWellKnownSymbolLogic('search', function (SEARCH, nativeSearch, maybeCallNative) {\n  return [\n    // `String.prototype.search` method\n    // https://tc39.es/ecma262/#sec-string.prototype.search\n    function search(regexp) {\n      var O = requireObjectCoercible(this);\n      var searcher = regexp == undefined ? undefined : regexp[SEARCH];\n      return searcher !== undefined ? searcher.call(regexp, O) : new RegExp(regexp)[SEARCH](toString(O));\n    },\n    // `RegExp.prototype[@@search]` method\n    // https://tc39.es/ecma262/#sec-regexp.prototype-@@search\n    function (string) {\n      var rx = anObject(this);\n      var S = toString(string);\n      var res = maybeCallNative(nativeSearch, rx, S);\n\n      if (res.done) return res.value;\n\n      var previousLastIndex = rx.lastIndex;\n      if (!sameValue(previousLastIndex, 0)) rx.lastIndex = 0;\n      var result = regExpExec(rx, S);\n      if (!sameValue(rx.lastIndex, previousLastIndex)) rx.lastIndex = previousLastIndex;\n      return result === null ? -1 : result.index;\n    }\n  ];\n});\n","// Styles\nimport './VTextarea.sass'\n\n// Extensions\nimport VTextField from '../VTextField/VTextField'\n\n// Utilities\nimport mixins from '../../util/mixins'\n\n// Types\nimport Vue from 'vue'\n\ninterface options extends Vue {\n  $refs: {\n    input: HTMLTextAreaElement\n  }\n}\n\nconst baseMixins = mixins<options &\n  InstanceType<typeof VTextField>\n>(\n  VTextField\n)\n\n/* @vue/component */\nexport default baseMixins.extend({\n  name: 'v-textarea',\n\n  props: {\n    autoGrow: Boolean,\n    noResize: Boolean,\n    rowHeight: {\n      type: [Number, String],\n      default: 24,\n      validator: (v: any) => !isNaN(parseFloat(v)),\n    },\n    rows: {\n      type: [Number, String],\n      default: 5,\n      validator: (v: any) => !isNaN(parseInt(v, 10)),\n    },\n  },\n\n  computed: {\n    classes (): object {\n      return {\n        'v-textarea': true,\n        'v-textarea--auto-grow': this.autoGrow,\n        'v-textarea--no-resize': this.noResizeHandle,\n        ...VTextField.options.computed.classes.call(this),\n      }\n    },\n    noResizeHandle (): boolean {\n      return this.noResize || this.autoGrow\n    },\n  },\n\n  watch: {\n    lazyValue () {\n      this.autoGrow && this.$nextTick(this.calculateInputHeight)\n    },\n    rowHeight () {\n      this.autoGrow && this.$nextTick(this.calculateInputHeight)\n    },\n  },\n\n  mounted () {\n    setTimeout(() => {\n      this.autoGrow && this.calculateInputHeight()\n    }, 0)\n  },\n\n  methods: {\n    calculateInputHeight () {\n      const input = this.$refs.input\n      if (!input) return\n\n      input.style.height = '0'\n      const height = input.scrollHeight\n      const minHeight = parseInt(this.rows, 10) * parseFloat(this.rowHeight)\n      // This has to be done ASAP, waiting for Vue\n      // to update the DOM causes ugly layout jumping\n      input.style.height = Math.max(minHeight, height) + 'px'\n    },\n    genInput () {\n      const input = VTextField.options.methods.genInput.call(this)\n\n      input.tag = 'textarea'\n      delete input.data!.attrs!.type\n      input.data!.attrs!.rows = this.rows\n\n      return input\n    },\n    onInput (e: Event) {\n      VTextField.options.methods.onInput.call(this, e)\n      this.autoGrow && this.calculateInputHeight()\n    },\n    onKeyDown (e: KeyboardEvent) {\n      // Prevents closing of a\n      // dialog when pressing\n      // enter\n      if (this.isFocused && e.keyCode === 13) {\n        e.stopPropagation()\n      }\n\n      this.$emit('keydown', e)\n    },\n  },\n})\n","// Styles\nimport '../../styles/components/_selection-controls.sass'\nimport './VSwitch.sass'\n\n// Mixins\nimport Selectable from '../../mixins/selectable'\nimport VInput from '../VInput'\n\n// Directives\nimport Touch from '../../directives/touch'\n\n// Components\nimport { VFabTransition } from '../transitions'\nimport VProgressCircular from '../VProgressCircular/VProgressCircular'\n\n// Helpers\nimport { keyCodes } from '../../util/helpers'\n\n// Types\nimport { VNode, VNodeData } from 'vue'\n\n/* @vue/component */\nexport default Selectable.extend({\n  name: 'v-switch',\n\n  directives: { Touch },\n\n  props: {\n    inset: Boolean,\n    loading: {\n      type: [Boolean, String],\n      default: false,\n    },\n    flat: {\n      type: Boolean,\n      default: false,\n    },\n  },\n\n  computed: {\n    classes (): object {\n      return {\n        ...VInput.options.computed.classes.call(this),\n        'v-input--selection-controls v-input--switch': true,\n        'v-input--switch--flat': this.flat,\n        'v-input--switch--inset': this.inset,\n      }\n    },\n    attrs (): object {\n      return {\n        'aria-checked': String(this.isActive),\n        'aria-disabled': String(this.isDisabled),\n        role: 'switch',\n      }\n    },\n    // Do not return undefined if disabled,\n    // according to spec, should still show\n    // a color when disabled and active\n    validationState (): string | undefined {\n      if (this.hasError && this.shouldValidate) return 'error'\n      if (this.hasSuccess) return 'success'\n      if (this.hasColor !== null) return this.computedColor\n      return undefined\n    },\n    switchData (): VNodeData {\n      return this.setTextColor(this.loading ? undefined : this.validationState, {\n        class: this.themeClasses,\n      })\n    },\n  },\n\n  methods: {\n    genDefaultSlot (): (VNode | null)[] {\n      return [\n        this.genSwitch(),\n        this.genLabel(),\n      ]\n    },\n    genSwitch (): VNode {\n      const { title, ...switchAttrs } = this.attrs$\n\n      return this.$createElement('div', {\n        staticClass: 'v-input--selection-controls__input',\n      }, [\n        this.genInput('checkbox', {\n          ...this.attrs,\n          ...switchAttrs,\n        }),\n        this.genRipple(this.setTextColor(this.validationState, {\n          directives: [{\n            name: 'touch',\n            value: {\n              left: this.onSwipeLeft,\n              right: this.onSwipeRight,\n            },\n          }],\n        })),\n        this.$createElement('div', {\n          staticClass: 'v-input--switch__track',\n          ...this.switchData,\n        }),\n        this.$createElement('div', {\n          staticClass: 'v-input--switch__thumb',\n          ...this.switchData,\n        }, [this.genProgress()]),\n      ])\n    },\n    genProgress (): VNode {\n      return this.$createElement(VFabTransition, {}, [\n        this.loading === false\n          ? null\n          : this.$slots.progress || this.$createElement(VProgressCircular, {\n            props: {\n              color: (this.loading === true || this.loading === '')\n                ? (this.color || 'primary')\n                : this.loading,\n              size: 16,\n              width: 2,\n              indeterminate: true,\n            },\n          }),\n      ])\n    },\n    onSwipeLeft () {\n      if (this.isActive) this.onChange()\n    },\n    onSwipeRight () {\n      if (!this.isActive) this.onChange()\n    },\n    onKeydown (e: KeyboardEvent) {\n      if (\n        (e.keyCode === keyCodes.left && this.isActive) ||\n        (e.keyCode === keyCodes.right && !this.isActive)\n      ) this.onChange()\n    },\n  },\n})\n","// Components\nimport { VExpandTransition } from '../transitions'\nimport { VIcon } from '../VIcon'\nimport VTreeview from './VTreeview'\n\n// Mixins\nimport { inject as RegistrableInject } from '../../mixins/registrable'\nimport Colorable from '../../mixins/colorable'\n\n// Utils\nimport mixins, { ExtractVue } from '../../util/mixins'\nimport { getObjectValueByPath, createRange } from '../../util/helpers'\n\n// Types\nimport { VNode, VNodeChildren, PropType } from 'vue'\nimport { PropValidator } from 'vue/types/options'\n\ntype VTreeViewInstance = InstanceType<typeof VTreeview>\n\nconst baseMixins = mixins(\n  Colorable,\n  RegistrableInject('treeview')\n)\n\ninterface options extends ExtractVue<typeof baseMixins> {\n  treeview: VTreeViewInstance\n}\n\nexport const VTreeviewNodeProps = {\n  activatable: Boolean,\n  activeClass: {\n    type: String,\n    default: 'v-treeview-node--active',\n  },\n  color: {\n    type: String,\n    default: 'primary',\n  },\n  expandIcon: {\n    type: String,\n    default: '$subgroup',\n  },\n  indeterminateIcon: {\n    type: String,\n    default: '$checkboxIndeterminate',\n  },\n  itemChildren: {\n    type: String,\n    default: 'children',\n  },\n  itemDisabled: {\n    type: String,\n    default: 'disabled',\n  },\n  itemKey: {\n    type: String,\n    default: 'id',\n  },\n  itemText: {\n    type: String,\n    default: 'name',\n  },\n  loadChildren: Function as PropType<(item: any) => Promise<void>>,\n  loadingIcon: {\n    type: String,\n    default: '$loading',\n  },\n  offIcon: {\n    type: String,\n    default: '$checkboxOff',\n  },\n  onIcon: {\n    type: String,\n    default: '$checkboxOn',\n  },\n  openOnClick: Boolean,\n  rounded: Boolean,\n  selectable: Boolean,\n  selectedColor: {\n    type: String,\n    default: 'accent',\n  },\n  shaped: Boolean,\n  transition: Boolean,\n  selectionType: {\n    type: String as PropType<'leaf' | 'independent'>,\n    default: 'leaf',\n    validator: (v: string) => ['leaf', 'independent'].includes(v),\n  },\n}\n\n/* @vue/component */\nconst VTreeviewNode = baseMixins.extend<options>().extend({\n  name: 'v-treeview-node',\n\n  inject: {\n    treeview: {\n      default: null,\n    },\n  },\n\n  props: {\n    level: Number,\n    item: {\n      type: Object,\n      default: () => null,\n    } as PropValidator<Record<string, unknown> | null>,\n    parentIsDisabled: Boolean,\n    ...VTreeviewNodeProps,\n  },\n\n  data: () => ({\n    hasLoaded: false,\n    isActive: false, // Node is selected (row)\n    isIndeterminate: false, // Node has at least one selected child\n    isLoading: false,\n    isOpen: false, // Node is open/expanded\n    isSelected: false, // Node is selected (checkbox)\n  }),\n\n  computed: {\n    disabled (): boolean {\n      return (\n        getObjectValueByPath(this.item, this.itemDisabled) ||\n        (this.parentIsDisabled && this.selectionType === 'leaf')\n      )\n    },\n    key (): string {\n      return getObjectValueByPath(this.item, this.itemKey)\n    },\n    children (): any[] | null {\n      const children = getObjectValueByPath(this.item, this.itemChildren)\n      return children && children.filter((child: any) => !this.treeview.isExcluded(getObjectValueByPath(child, this.itemKey)))\n    },\n    text (): string {\n      return getObjectValueByPath(this.item, this.itemText)\n    },\n    scopedProps (): object {\n      return {\n        item: this.item,\n        leaf: !this.children,\n        selected: this.isSelected,\n        indeterminate: this.isIndeterminate,\n        active: this.isActive,\n        open: this.isOpen,\n      }\n    },\n    computedIcon (): string {\n      if (this.isIndeterminate) return this.indeterminateIcon\n      else if (this.isSelected) return this.onIcon\n      else return this.offIcon\n    },\n    hasChildren (): boolean {\n      return !!this.children && (!!this.children.length || !!this.loadChildren)\n    },\n  },\n\n  created () {\n    this.treeview.register(this)\n  },\n\n  beforeDestroy () {\n    this.treeview.unregister(this)\n  },\n\n  methods: {\n    checkChildren (): Promise<void> {\n      return new Promise<void>(resolve => {\n        // TODO: Potential issue with always trying\n        // to load children if response is empty?\n        if (!this.children || this.children.length || !this.loadChildren || this.hasLoaded) return resolve()\n\n        this.isLoading = true\n        resolve(this.loadChildren(this.item))\n      }).then(() => {\n        this.isLoading = false\n        this.hasLoaded = true\n      })\n    },\n    open () {\n      this.isOpen = !this.isOpen\n      this.treeview.updateOpen(this.key, this.isOpen)\n      this.treeview.emitOpen()\n    },\n    genLabel () {\n      const children = []\n\n      if (this.$scopedSlots.label) children.push(this.$scopedSlots.label(this.scopedProps))\n      else children.push(this.text)\n\n      return this.$createElement('div', {\n        slot: 'label',\n        staticClass: 'v-treeview-node__label',\n      }, children)\n    },\n    genPrependSlot () {\n      if (!this.$scopedSlots.prepend) return null\n\n      return this.$createElement('div', {\n        staticClass: 'v-treeview-node__prepend',\n      }, this.$scopedSlots.prepend(this.scopedProps))\n    },\n    genAppendSlot () {\n      if (!this.$scopedSlots.append) return null\n\n      return this.$createElement('div', {\n        staticClass: 'v-treeview-node__append',\n      }, this.$scopedSlots.append(this.scopedProps))\n    },\n    genContent () {\n      const children = [\n        this.genPrependSlot(),\n        this.genLabel(),\n        this.genAppendSlot(),\n      ]\n\n      return this.$createElement('div', {\n        staticClass: 'v-treeview-node__content',\n      }, children)\n    },\n    genToggle () {\n      return this.$createElement(VIcon, {\n        staticClass: 'v-treeview-node__toggle',\n        class: {\n          'v-treeview-node__toggle--open': this.isOpen,\n          'v-treeview-node__toggle--loading': this.isLoading,\n        },\n        slot: 'prepend',\n        on: {\n          click: (e: MouseEvent) => {\n            e.stopPropagation()\n\n            if (this.isLoading) return\n\n            this.checkChildren().then(() => this.open())\n          },\n        },\n      }, [this.isLoading ? this.loadingIcon : this.expandIcon])\n    },\n    genCheckbox () {\n      return this.$createElement(VIcon, {\n        staticClass: 'v-treeview-node__checkbox',\n        props: {\n          color: this.isSelected || this.isIndeterminate ? this.selectedColor : undefined,\n          disabled: this.disabled,\n        },\n        on: {\n          click: (e: MouseEvent) => {\n            e.stopPropagation()\n\n            if (this.isLoading) return\n\n            this.checkChildren().then(() => {\n              // We nextTick here so that items watch in VTreeview has a chance to run first\n              this.$nextTick(() => {\n                this.isSelected = !this.isSelected\n                this.isIndeterminate = false\n\n                this.treeview.updateSelected(this.key, this.isSelected)\n                this.treeview.emitSelected()\n              })\n            })\n          },\n        },\n      }, [this.computedIcon])\n    },\n    genLevel (level: number) {\n      return createRange(level).map(() => this.$createElement('div', {\n        staticClass: 'v-treeview-node__level',\n      }))\n    },\n    genNode () {\n      const children = [this.genContent()]\n\n      if (this.selectable) children.unshift(this.genCheckbox())\n\n      if (this.hasChildren) {\n        children.unshift(this.genToggle())\n      } else {\n        children.unshift(...this.genLevel(1))\n      }\n\n      children.unshift(...this.genLevel(this.level))\n\n      return this.$createElement('div', this.setTextColor(this.isActive && this.color, {\n        staticClass: 'v-treeview-node__root',\n        class: {\n          [this.activeClass]: this.isActive,\n        },\n        on: {\n          click: () => {\n            if (this.openOnClick && this.hasChildren) {\n              this.checkChildren().then(this.open)\n            } else if (this.activatable && !this.disabled) {\n              this.isActive = !this.isActive\n              this.treeview.updateActive(this.key, this.isActive)\n              this.treeview.emitActive()\n            }\n          },\n        },\n      }), children)\n    },\n    genChild (item: any, parentIsDisabled: boolean) {\n      return this.$createElement(VTreeviewNode, {\n        key: getObjectValueByPath(item, this.itemKey),\n        props: {\n          activatable: this.activatable,\n          activeClass: this.activeClass,\n          item,\n          selectable: this.selectable,\n          selectedColor: this.selectedColor,\n          color: this.color,\n          expandIcon: this.expandIcon,\n          indeterminateIcon: this.indeterminateIcon,\n          offIcon: this.offIcon,\n          onIcon: this.onIcon,\n          loadingIcon: this.loadingIcon,\n          itemKey: this.itemKey,\n          itemText: this.itemText,\n          itemDisabled: this.itemDisabled,\n          itemChildren: this.itemChildren,\n          loadChildren: this.loadChildren,\n          transition: this.transition,\n          openOnClick: this.openOnClick,\n          rounded: this.rounded,\n          shaped: this.shaped,\n          level: this.level + 1,\n          selectionType: this.selectionType,\n          parentIsDisabled,\n        },\n        scopedSlots: this.$scopedSlots,\n      })\n    },\n    genChildrenWrapper () {\n      if (!this.isOpen || !this.children) return null\n\n      const children = [this.children.map(c => this.genChild(c, this.disabled))]\n\n      return this.$createElement('div', {\n        staticClass: 'v-treeview-node__children',\n      }, children)\n    },\n    genTransition () {\n      return this.$createElement(VExpandTransition, [this.genChildrenWrapper()])\n    },\n  },\n\n  render (h): VNode {\n    const children: VNodeChildren = [this.genNode()]\n\n    if (this.transition) children.push(this.genTransition())\n    else children.push(this.genChildrenWrapper())\n\n    return h('div', {\n      staticClass: 'v-treeview-node',\n      class: {\n        'v-treeview-node--leaf': !this.hasChildren,\n        'v-treeview-node--click': this.openOnClick,\n        'v-treeview-node--disabled': this.disabled,\n        'v-treeview-node--rounded': this.rounded,\n        'v-treeview-node--shaped': this.shaped,\n        'v-treeview-node--selected': this.isSelected,\n      },\n      attrs: {\n        'aria-expanded': String(this.isOpen),\n      },\n    }, children)\n  },\n})\n\nexport default VTreeviewNode\n","import { getObjectValueByPath } from '../../../util/helpers'\nimport { TreeviewItemFunction } from 'vuetify/types'\n\nexport function filterTreeItem (item: object, search: string, textKey: string): boolean {\n  const text = getObjectValueByPath(item, textKey)\n\n  return text.toLocaleLowerCase().indexOf(search.toLocaleLowerCase()) > -1\n}\n\nexport function filterTreeItems (\n  filter: TreeviewItemFunction,\n  item: any,\n  search: string,\n  idKey: string,\n  textKey: string,\n  childrenKey: string,\n  excluded: Set<string | number>\n): boolean {\n  if (filter(item, search, textKey)) {\n    return true\n  }\n\n  const children = getObjectValueByPath(item, childrenKey)\n\n  if (children) {\n    let match = false\n    for (let i = 0; i < children.length; i++) {\n      if (filterTreeItems(filter, children[i], search, idKey, textKey, childrenKey, excluded)) {\n        match = true\n      }\n    }\n\n    if (match) return true\n  }\n\n  excluded.add(getObjectValueByPath(item, idKey))\n\n  return false\n}\n","// Styles\nimport './VTreeview.sass'\n\n// Types\nimport { VNode, VNodeChildrenArrayContents, PropType } from 'vue'\nimport { PropValidator } from 'vue/types/options'\nimport { TreeviewItemFunction } from 'vuetify/types'\n\n// Components\nimport VTreeviewNode, { VTreeviewNodeProps } from './VTreeviewNode'\n\n// Mixins\nimport Themeable from '../../mixins/themeable'\nimport { provide as RegistrableProvide } from '../../mixins/registrable'\n\n// Utils\nimport {\n  arrayDiff,\n  deepEqual,\n  getObjectValueByPath,\n} from '../../util/helpers'\nimport mixins from '../../util/mixins'\nimport { consoleWarn } from '../../util/console'\nimport {\n  filterTreeItems,\n  filterTreeItem,\n} from './util/filterTreeItems'\n\ntype VTreeviewNodeInstance = InstanceType<typeof VTreeviewNode>\n\ntype NodeCache = Set<string | number>\ntype NodeArray = (string | number)[]\n\ntype NodeState = {\n  parent: number | string | null\n  children: (number | string)[]\n  vnode: VTreeviewNodeInstance | null\n  isActive: boolean\n  isSelected: boolean\n  isIndeterminate: boolean\n  isOpen: boolean\n  item: any\n}\n\nexport default mixins(\n  RegistrableProvide('treeview'),\n  Themeable\n  /* @vue/component */\n).extend({\n  name: 'v-treeview',\n\n  provide (): object {\n    return { treeview: this }\n  },\n\n  props: {\n    active: {\n      type: Array,\n      default: () => ([]),\n    } as PropValidator<NodeArray>,\n    dense: Boolean,\n    filter: Function as PropType<TreeviewItemFunction>,\n    hoverable: Boolean,\n    items: {\n      type: Array,\n      default: () => ([]),\n    } as PropValidator<any[]>,\n    multipleActive: Boolean,\n    open: {\n      type: Array,\n      default: () => ([]),\n    } as PropValidator<NodeArray>,\n    openAll: Boolean,\n    returnObject: {\n      type: Boolean,\n      default: false, // TODO: Should be true in next major\n    },\n    search: String,\n    value: {\n      type: Array,\n      default: () => ([]),\n    } as PropValidator<NodeArray>,\n    ...VTreeviewNodeProps,\n  },\n\n  data: () => ({\n    level: -1,\n    activeCache: new Set() as NodeCache,\n    nodes: {} as Record<string | number, NodeState>,\n    openCache: new Set() as NodeCache,\n    selectedCache: new Set() as NodeCache,\n  }),\n\n  computed: {\n    excludedItems (): Set<string | number> {\n      const excluded = new Set<string|number>()\n\n      if (!this.search) return excluded\n\n      for (let i = 0; i < this.items.length; i++) {\n        filterTreeItems(\n          this.filter || filterTreeItem,\n          this.items[i],\n          this.search,\n          this.itemKey,\n          this.itemText,\n          this.itemChildren,\n          excluded\n        )\n      }\n\n      return excluded\n    },\n  },\n\n  watch: {\n    items: {\n      handler () {\n        const oldKeys = Object.keys(this.nodes).map(k => getObjectValueByPath(this.nodes[k].item, this.itemKey))\n        const newKeys = this.getKeys(this.items)\n        const diff = arrayDiff(newKeys, oldKeys)\n\n        // We only want to do stuff if items have changed\n        if (!diff.length && newKeys.length < oldKeys.length) return\n\n        // If nodes are removed we need to clear them from this.nodes\n        diff.forEach(k => delete this.nodes[k])\n\n        const oldSelectedCache = [...this.selectedCache]\n        this.selectedCache = new Set()\n        this.activeCache = new Set()\n        this.openCache = new Set()\n        this.buildTree(this.items)\n\n        // Only emit selected if selection has changed\n        // as a result of items changing. This fixes a\n        // potential double emit when selecting a node\n        // with dynamic children\n        if (!deepEqual(oldSelectedCache, [...this.selectedCache])) this.emitSelected()\n      },\n      deep: true,\n    },\n    active (value: (string | number | any)[]) {\n      this.handleNodeCacheWatcher(value, this.activeCache, this.updateActive, this.emitActive)\n    },\n    value (value: (string | number | any)[]) {\n      this.handleNodeCacheWatcher(value, this.selectedCache, this.updateSelected, this.emitSelected)\n    },\n    open (value: (string | number | any)[]) {\n      this.handleNodeCacheWatcher(value, this.openCache, this.updateOpen, this.emitOpen)\n    },\n  },\n\n  created () {\n    const getValue = (key: string | number) => this.returnObject ? getObjectValueByPath(key, this.itemKey) : key\n\n    this.buildTree(this.items)\n\n    for (const value of this.value.map(getValue)) {\n      this.updateSelected(value, true, true)\n    }\n\n    for (const active of this.active.map(getValue)) {\n      this.updateActive(active, true)\n    }\n  },\n\n  mounted () {\n    // Save the developer from themselves\n    if (this.$slots.prepend || this.$slots.append) {\n      consoleWarn('The prepend and append slots require a slot-scope attribute', this)\n    }\n\n    if (this.openAll) {\n      this.updateAll(true)\n    } else {\n      this.open.forEach(key => this.updateOpen(this.returnObject ? getObjectValueByPath(key, this.itemKey) : key, true))\n      this.emitOpen()\n    }\n  },\n\n  methods: {\n    /** @public */\n    updateAll (value: boolean) {\n      Object.keys(this.nodes).forEach(key => this.updateOpen(getObjectValueByPath(this.nodes[key].item, this.itemKey), value))\n      this.emitOpen()\n    },\n    getKeys (items: any[], keys: any[] = []) {\n      for (let i = 0; i < items.length; i++) {\n        const key = getObjectValueByPath(items[i], this.itemKey)\n        keys.push(key)\n        const children = getObjectValueByPath(items[i], this.itemChildren)\n        if (children) {\n          keys.push(...this.getKeys(children))\n        }\n      }\n\n      return keys\n    },\n    buildTree (items: any[], parent: (string | number | null) = null) {\n      for (let i = 0; i < items.length; i++) {\n        const item = items[i]\n        const key = getObjectValueByPath(item, this.itemKey)\n        const children = getObjectValueByPath(item, this.itemChildren) ?? []\n        const oldNode = this.nodes.hasOwnProperty(key) ? this.nodes[key] : {\n          isSelected: false, isIndeterminate: false, isActive: false, isOpen: false, vnode: null,\n        } as NodeState\n\n        const node: any = {\n          vnode: oldNode.vnode,\n          parent,\n          children: children.map((c: any) => getObjectValueByPath(c, this.itemKey)),\n          item,\n        }\n\n        this.buildTree(children, key)\n\n        // This fixed bug with dynamic children resetting selected parent state\n        if (!this.nodes.hasOwnProperty(key) && parent !== null && this.nodes.hasOwnProperty(parent)) {\n          node.isSelected = this.nodes[parent].isSelected\n        } else {\n          node.isSelected = oldNode.isSelected\n          node.isIndeterminate = oldNode.isIndeterminate\n        }\n\n        node.isActive = oldNode.isActive\n        node.isOpen = oldNode.isOpen\n\n        this.nodes[key] = node\n\n        if (children.length) {\n          const { isSelected, isIndeterminate } = this.calculateState(key, this.nodes)\n\n          node.isSelected = isSelected\n          node.isIndeterminate = isIndeterminate\n        }\n\n        // Don't forget to rebuild cache\n        if (this.nodes[key].isSelected && (this.selectionType === 'independent' || node.children.length === 0)) this.selectedCache.add(key)\n        if (this.nodes[key].isActive) this.activeCache.add(key)\n        if (this.nodes[key].isOpen) this.openCache.add(key)\n\n        this.updateVnodeState(key)\n      }\n    },\n    calculateState (node: string | number, state: Record<string | number, NodeState>) {\n      const children = state[node].children\n      const counts = children.reduce((counts: number[], child: string | number) => {\n        counts[0] += +Boolean(state[child].isSelected)\n        counts[1] += +Boolean(state[child].isIndeterminate)\n\n        return counts\n      }, [0, 0])\n\n      const isSelected = !!children.length && counts[0] === children.length\n      const isIndeterminate = !isSelected && (counts[0] > 0 || counts[1] > 0)\n\n      return {\n        isSelected,\n        isIndeterminate,\n      }\n    },\n    emitOpen () {\n      this.emitNodeCache('update:open', this.openCache)\n    },\n    emitSelected () {\n      this.emitNodeCache('input', this.selectedCache)\n    },\n    emitActive () {\n      this.emitNodeCache('update:active', this.activeCache)\n    },\n    emitNodeCache (event: string, cache: NodeCache) {\n      this.$emit(event, this.returnObject ? [...cache].map(key => this.nodes[key].item) : [...cache])\n    },\n    handleNodeCacheWatcher (value: any[], cache: NodeCache, updateFn: Function, emitFn: Function) {\n      value = this.returnObject ? value.map(v => getObjectValueByPath(v, this.itemKey)) : value\n      const old = [...cache]\n      if (deepEqual(old, value)) return\n\n      old.forEach(key => updateFn(key, false))\n      value.forEach(key => updateFn(key, true))\n\n      emitFn()\n    },\n    getDescendants (key: string | number, descendants: NodeArray = []) {\n      const children = this.nodes[key].children\n\n      descendants.push(...children)\n\n      for (let i = 0; i < children.length; i++) {\n        descendants = this.getDescendants(children[i], descendants)\n      }\n\n      return descendants\n    },\n    getParents (key: string | number) {\n      let parent = this.nodes[key].parent\n\n      const parents = []\n      while (parent !== null) {\n        parents.push(parent)\n        parent = this.nodes[parent].parent\n      }\n\n      return parents\n    },\n    register (node: VTreeviewNodeInstance) {\n      const key = getObjectValueByPath(node.item, this.itemKey)\n      this.nodes[key].vnode = node\n\n      this.updateVnodeState(key)\n    },\n    unregister (node: VTreeviewNodeInstance) {\n      const key = getObjectValueByPath(node.item, this.itemKey)\n      if (this.nodes[key]) this.nodes[key].vnode = null\n    },\n    isParent (key: string | number) {\n      return this.nodes[key].children && this.nodes[key].children.length\n    },\n    updateActive (key: string | number, isActive: boolean) {\n      if (!this.nodes.hasOwnProperty(key)) return\n\n      if (!this.multipleActive) {\n        this.activeCache.forEach(active => {\n          this.nodes[active].isActive = false\n          this.updateVnodeState(active)\n          this.activeCache.delete(active)\n        })\n      }\n\n      const node = this.nodes[key]\n      if (!node) return\n\n      if (isActive) this.activeCache.add(key)\n      else this.activeCache.delete(key)\n\n      node.isActive = isActive\n\n      this.updateVnodeState(key)\n    },\n    updateSelected (key: string | number, isSelected: boolean, isForced = false) {\n      if (!this.nodes.hasOwnProperty(key)) return\n\n      const changed = new Map()\n\n      if (this.selectionType !== 'independent') {\n        for (const descendant of this.getDescendants(key)) {\n          if (!getObjectValueByPath(this.nodes[descendant].item, this.itemDisabled) || isForced) {\n            this.nodes[descendant].isSelected = isSelected\n            this.nodes[descendant].isIndeterminate = false\n            changed.set(descendant, isSelected)\n          }\n        }\n\n        const calculated = this.calculateState(key, this.nodes)\n        this.nodes[key].isSelected = isSelected\n        this.nodes[key].isIndeterminate = calculated.isIndeterminate\n        changed.set(key, isSelected)\n\n        for (const parent of this.getParents(key)) {\n          const calculated = this.calculateState(parent, this.nodes)\n          this.nodes[parent].isSelected = calculated.isSelected\n          this.nodes[parent].isIndeterminate = calculated.isIndeterminate\n          changed.set(parent, calculated.isSelected)\n        }\n      } else {\n        this.nodes[key].isSelected = isSelected\n        this.nodes[key].isIndeterminate = false\n        changed.set(key, isSelected)\n      }\n\n      for (const [key, value] of changed.entries()) {\n        this.updateVnodeState(key)\n\n        if (this.selectionType === 'leaf' && this.isParent(key)) continue\n\n        value === true ? this.selectedCache.add(key) : this.selectedCache.delete(key)\n      }\n    },\n    updateOpen (key: string | number, isOpen: boolean) {\n      if (!this.nodes.hasOwnProperty(key)) return\n\n      const node = this.nodes[key]\n      const children = getObjectValueByPath(node.item, this.itemChildren)\n\n      if (children && !children.length && node.vnode && !node.vnode.hasLoaded) {\n        node.vnode.checkChildren().then(() => this.updateOpen(key, isOpen))\n      } else if (children && children.length) {\n        node.isOpen = isOpen\n\n        node.isOpen ? this.openCache.add(key) : this.openCache.delete(key)\n\n        this.updateVnodeState(key)\n      }\n    },\n    updateVnodeState (key: string | number) {\n      const node = this.nodes[key]\n\n      if (node && node.vnode) {\n        node.vnode.isSelected = node.isSelected\n        node.vnode.isIndeterminate = node.isIndeterminate\n        node.vnode.isActive = node.isActive\n        node.vnode.isOpen = node.isOpen\n      }\n    },\n    isExcluded (key: string | number) {\n      return !!this.search && this.excludedItems.has(key)\n    },\n  },\n\n  render (h): VNode {\n    const children: VNodeChildrenArrayContents = this.items.length\n      ? this.items.filter(item => {\n        return !this.isExcluded(getObjectValueByPath(item, this.itemKey))\n      }).map(item => {\n        const genChild = VTreeviewNode.options.methods.genChild.bind(this)\n\n        return genChild(item, getObjectValueByPath(item, this.itemDisabled))\n      })\n      /* istanbul ignore next */\n      : this.$slots.default! // TODO: remove type annotation with TS 3.2\n\n    return h('div', {\n      staticClass: 'v-treeview',\n      class: {\n        'v-treeview--hoverable': this.hoverable,\n        'v-treeview--dense': this.dense,\n        ...this.themeClasses,\n      },\n    }, children)\n  },\n})\n"],"sourceRoot":""}